name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always
  RUSTDOCFLAGS: "--deny warnings"
  RUSTFLAGS: "--deny warnings"
  RUST_TEST_THREADS: 1
  # COREHOST_TRACE: 4

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        toolchain: ["nightly", "stable"]
        target: ["x86_64-unknown-linux-gnu", "x86_64-pc-windows-msvc", "i686-pc-windows-msvc", "x86_64-apple-darwin"]
        dotnet: ["5.0", "6.0", "7.0"]
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            dotnet_install_download_script: curl -sSL https://dot.net/v1/dotnet-install.sh > dotnet-install.sh; chmod +x dotnet-install.sh
            dotnet_install_script: ./dotnet-install.sh
            arch: x64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            dotnet_install_download_script: Invoke-WebRequest -Uri https://dot.net/v1/dotnet-install.ps1 -OutFile dotnet-install.ps1
            dotnet_install_script: ./dotnet-install.ps1
            arch: x64
          - target: i686-pc-windows-msvc
            os: windows-latest
            dotnet_install_download_script: Invoke-WebRequest -Uri https://dot.net/v1/dotnet-install.ps1 -OutFile dotnet-install.ps1
            dotnet_install_script: ./dotnet-install.ps1
            arch: x86
          - target: x86_64-apple-darwin
            os: macos-latest
            dotnet_install_download_script: curl -sSL https://dot.net/v1/dotnet-install.sh > dotnet-install.sh; chmod +x dotnet-install.sh
            dotnet_install_script: ./dotnet-install.sh
            arch: x64
    env:
      NETCOREHOST_TEST_NETCORE_VERSION: net${{ matrix.dotnet }}
    steps:
    - uses: actions/checkout@v2

    - name: Install .NET SDK ${{ matrix.dotnet }}
      run: |
        ${{ matrix.dotnet_install_download_script }}
        ${{ matrix.dotnet_install_script }} -Architecture ${{ matrix.arch }} -Channel ${{ matrix.dotnet }} -Runtime dotnet
        
    - name: Install latest ${{ matrix.toolchain }}
      uses: actions-rs/toolchain@v1
      with:
          target: ${{ matrix.target }}
          toolchain: ${{ matrix.toolchain }}
          override: true
      
    - name: Build
      uses: actions-rs/cargo@v1
      with:
        use-cross: false
        command: build
        args: --target ${{ matrix.target }}
      
    - name: Test
      uses: actions-rs/cargo@v1
      with:
        use-cross: false
        command: test
        args: --target ${{ matrix.target }} --all-targets --no-fail-fast
 
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        toolchain: ["nightly", "beta", "stable"]
        target: ["aarch64-unknown-linux-gnu", "armv7-unknown-linux-gnueabihf", "x86_64-unknown-linux-gnu", "x86_64-pc-windows-msvc", "i686-pc-windows-msvc", "x86_64-apple-darwin"]
          
    steps:
    - uses: actions/checkout@v2

    - name: Install latest ${{ matrix.toolchain }}
      uses: actions-rs/toolchain@v1
      with:
          target: ${{ matrix.target }}
          toolchain: ${{ matrix.toolchain }}
          override: true
      
    - name: Build
      uses: actions-rs/cargo@v1
      with:
        use-cross: true
        command: build
        args: --release --target ${{ matrix.target }}
        
  examples:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install latest beta
      uses: actions-rs/toolchain@v1
      with:
          toolchain: nightly
          override: true
    - name: Run example 'run-app'
      run: cargo run --example run-app
    - name: Run example 'call-managed-function'
      run: cargo run --example call-managed-function
    - name: Run example 'passing-parameters'
      run: cargo run --example passing-parameters

  documentation:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
          - os: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install latest nightly
      uses: actions-rs/toolchain@v1
      with:
          profile: minimal
          toolchain: nightly
          override: true
    - name: Generate documentation
      run: cargo doc --all-features
    - name: Install cargo-deadlinks
      run: cargo install cargo-deadlinks
    - name: Check dead links in doc
      run: cargo deadlinks

  clippy:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
          - os: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
            toolchain: nightly
            components: clippy
            override: true
            
      - name: Clippy check
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features
          
  fmt:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
          - os: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install latest nightly
      uses: actions-rs/toolchain@v1
      with:
          profile: minimal
          toolchain: nightly
          override: true
          components: rustfmt
          
    - name: Format check
      uses: actions-rs/cargo@v1
      with:
          command: fmt
          args: --all -- --check
